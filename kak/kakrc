source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "https://github.com/robertmeta/plug.kak" noload

plug "ul/kak-lsp" do %{
    # cargo build --release --locked
    # cargo install --force --path .
} config %{
    set global lsp_cmd "kak-lsp -s %val{session} --config %val{config}/kak-lsp.toml"
    set global lsp_cmd "%opt{lsp_cmd} -vvv --log /tmp/kak-lsp.log"

    set global lsp_diagnostic_line_error_sign ''
    set global lsp_diagnostic_line_warning_sign ''

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }
    map global lsp -docstring "Rename the item under cursor" R ": lsp-rename-prompt<ret>"
    map global user -docstring "Enable lsp keymap mode for next key" l ": enter-user-mode<space>lsp<ret>"



    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(swift|objc|c|cpp|cc|rust|javascript|typescript|latex) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-inlay-diagnostics-enable window
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global KakEnd .* lsp-exit
}
hook global WinSetOption filetype=swift %{
    set-option window lintcmd "swiftlint --quiet --path"
    set-option buffer formatcmd '~/.local/bin/swift-format --configuration ~/.swift-format'
}

plug "occivink/kakoune-gdb"

plug "alexherbo2/prelude.kak"
plug "alexherbo2/pager.kak"
plug "alexherbo2/connect.kak" config %{
    require-module connect
    require-module connect-fzf
    source "%val{config}/connect-sk/sk.kak"
    require-module connect-sk
    require-module connect-nnn
    map global normal <c-t> ': connect-terminal<ret>'
}
plug "alexherbo2/explore.kak" %{
    require-module explore-files

    # Explore files and buffers with fzf
    alias global explore-files sk-files
    alias global explore-buffers fzf-buffers
    map -docstring 'fzf' global normal '<c-p>' ': sk-files<ret>'
    map -docstring 'fzf' global normal '<c-f>' ': fzf-grep<ret>'

    explore-files-enable
}

plug 'delapouite/kakoune-buffers' %{
    hook global WinDisplay .* info-buffers

    map global user b ':enter-buffers-mode<ret>'              -docstring 'buffers…'
    map global user B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'

    alias global bd delete-buffer
    alias global bf buffer-first
    alias global bl buffer-last
    alias global bo buffer-only
    alias global bo! buffer-only-force
}
plug 'https://gitlab.com/Screwtapello/kakoune-mark-show' demand
plug "JJK96/kakoune-rainbow" demand
plug "insipx/kak-crosshairs" demand
plug "occivink/kakoune-roguelight" demand
plug "evanrelf/primer.kak" theme %{ colorscheme primer }
#plug "coder5506/shirotelin-kakoune" theme %{
#    colorscheme shirotelin
#    face global MenuForeground black,rgb:00005f
#    face global MenuBackground rgb:00005f,black
#    face global MenuInfo rgb:00005f
#    face global Information white,black
#    face global Error black,red
#    face global StatusLine rgb:00005f,default
#    face global StatusLineMode rgb:af0000,default
#    face global StatusLineInfo rgb:0000af,default
#    face global StatusLineValue rgb:005f00,default
#    face global StatusCursor white,blue
#
#    face global PrimarySelection default,default+r
#    face global PrimarySelection default,rgb:8fb7df
#    face global PrimarySelection default,rgb:afd7ff
#    face global PrimaryCursor default,default+r
#    face global PrimaryCursor black,blue
#    face global PrimaryCursor black,rgb:0000af+B
#    face global PrimaryCursorEol black,red
#
#    #face global SecondarySelection default, rgba:afdfffff
#    face global SecondarySelection default,rgb:cccccc
#    face global SecondaryCursor black,rgb:666666
#    face global SecondaryCursorEol black,red
#
#    face global MatchingChar default,default+r
#    face global Whitespace default,default+fb
#    face global BufferPadding rgb:00005f,default
#
#}
plug "raiguard/one.kak" theme
plug "Icantjuddle/ayu-kak" theme
plug 'delapouite/kakoune-palette'
#plug "caksoylar/kakoune-mysticaltutor" theme %{ colorscheme mysticaltutor }
#plug "caksoylar/kakoune-snow" theme %{ colorscheme snow-dark }  # or snow-dark
#plug "nesyamun/nord-kakoune" theme %{ colorscheme nord }
colorscheme ayu-mirage

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed:, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|swift) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp|haskell) expandtab
}

add-highlighter global/ show-matching


# Kitty
 
hook global ModuleLoaded kitty %{
    # Kitty does not have popovers, but we can have fzf cover all of kakoune in a new tab instead
    alias global popup kitty-terminal-tab
    alias global terminal kitty
}
require-module kitty
set-option global kitty_window_type os-window


hook global WinSetOption comment_line=(.*) %{
    add-highlighter -override window/todo regex "\Q%val{hook_param_capture_1}\E\h*(TODO:|FIXME:|NOTE:|XXX:)[^\n]*" 1:rgb:ff8c00+Fb
}

#hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor -separator ' ⎸ ' }
hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor -separator ' ⎸ ' -cursor-separator '  ' }
#hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor -separator ' ⎹ ' -cursor-separator '  ' }
hook global WinCreate ^[^*]+$ %{ add-highlighter window/ show-matching }


hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+b }

hook global BufCreate .*\.tex %{
    set-option buffer filetype latex
}
hook global BufCreate .*\.md %{
    add-highlighter buffer/ wrap -word -width 120
}

hook global WinCreate ^[^*]+$ %{editorconfig-load}

# LSP

set global ui_options ncurses_assistant=duck
# set global ui_options ncurses_status_on_top=yes 

# Dvorak

declare-option -docstring "Filepath to the kak file that defines the current keymap" str keymap 
declare-option -docstring "Name of the current keymap" str keymap_name
declare-option -docstring "Name of the default keymap" str keymap_default_name
set global keymap_default_name "Qwerty"

define-command -params 1 -shell-script-candidates %{
    ls "$kak_config/keymaps/" | grep '\.kak$' | perl -pe 's/^(.*)\.kak$/\1/'
} keymap %{
    # Disable previous keymap
    try %sh{
        cat "$kak_opt_keymap" | sed -e 's/^map/unmap/' -e 's/ -docstring .*//'  
    }
    set global keymap ""
    set global keymap_name "%opt{keymap_default_name}"

    set global keymap "%val{config}/keymaps/%arg{1}.kak"
    source "%opt{keymap}"
}

keymap dvorak

set-option global modelinefmt "%opt{modelinefmt}   %%opt{keymap_name}"

hook global InsertChar \n %[ try %[ exec -draft k<a-x> <a-k>[{(]\h*$<ret> j<a-gt> ] ]
hook global InsertChar \n %{ try %[ exec -draft k<a-x> s^\h+/*\h*<ret>y j<a-h>P ]}

set global tabstop 4                                                        
set global indentwidth 4

map global normal ( ': buffer-previous<ret>'
map global normal ) ': buffer-next<ret>'
# Spelling
declare-user-mode spell
map global user -docstring "Enable spell keymap mode for next key" <ret> ": enter-user-mode<space>spell<ret>"

map global spell s '<space><a-i>w:spell-replace<ret>' -docstring "Suggest replacement words"
map global spell l '<space><a-i>w:spell-add<ret>'     -docstring "Learn spelling"
map global spell n ':spell-next<ret>'                 -docstring "Next"
map global spell r ':spell en-GB<ret>'                -docstring "Refresh"
map global spell c ':spell-clear<ret>'                -docstring "Clear"
map global goto  G ':spell-next<ret>'                 -docstring "next misspelling"


set-option -add global ui_options ncurses_padding_fill=yes
set-option -add global ui_options ncurses_padding_char=╱ # More fancy examples: ▚ ╳ ╱ ┼
